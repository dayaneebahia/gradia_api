name: Run Postman API Tests

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  postman-tests:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do repositório
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Instala o Docker Compose
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # 3. Sobe os containers (API + DB) via Docker
      - name: Build and start API via Docker Compose
        run: |
          docker-compose up -d --build
          echo "Waiting for API to be ready..."
          until curl -s http://localhost:8000/finance/cycles/ > /dev/null; do
            echo "Waiting for API..."
            sleep 5
          done

      # 4. Instala Node.js
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 5. Instala Newman (CLI do Postman)
      - name: Install Newman
        run: npm install -g newman

      # 6. Executa os testes Postman
      - name: Run Postman Collection
        run: |
          newman run collections/Finance\ API.postman_collection.json \
          -e collections/DEV.postman_environment.json \
          --reporters cli,junit \
          --reporter-junit-export results.xml
        continue-on-error: true  # Continua mesmo se falhar

      # 7. Faz upload dos resultados como artefato
      - name: Upload Test Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: postman-results
          path: results.xml
        if: always()

      # 8. Publica o relatório JUnit na aba Actions
      - name: Publish JUnit Report
        uses: dorny/test-reporter@v1
        with:
          name: Postman API Tests
          path: results.xml
          reporter: jest-junit
        if: always()

      # 9. Para e remove os containers no final
      - name: Stop and remove Docker containers
        run: docker-compose down
        if: always()
